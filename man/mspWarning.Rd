% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mspWarning.R
\name{mspWarning}
\alias{mspWarning}
\title{Process Alarms}
\usage{
mspWarning(mspMonitor_object, faultsToTriggerAlarm = 3)
}
\arguments{
\item{mspMonitor_object}{An xts matrix returned by the mspMonitor() function}

\item{faultsToTriggerAlarm}{Specifies how many sequential faults will cause
an alarm to trigger. Defaults to 3.}
}
\value{
An xts matrix of the same dimensions as mspMonitor_object, with a
recorded negative or positive and type-specific alarm status
}
\description{
Trigger an alarm, if necessary, for incoming multivariate
process observations.
}
\details{
This function and the mspMonitor() function are designed to be ran
via a script within a batch. The file flow is as follows: at each time
interval, run the mspMonitor() function on the daily observation matrix to
add a flag status to the most recent incoming observation in the matrix, and
return this new xts matrix. Then, pass this updated daily observation matrix
to the mspWarning() function, which will check if the process has recorded
three or more sequential monitoring statistic flags in a row. Of note, since
these functions are expected to be repeatedly ran in real time, this
function will only check for an alarm within the last row of the xts matrix.
To check multiple rows for an alarm state, please use the mspTrain function,
which was designed to check multiple past observations.

This function requires an xts matrix returned by the mspMonitor() function.
}
\examples{
data("normal_switch_xts")
# The state values are recorded in the first column.
n <- nrow(normal_switch_xts)
nTrainObs <- floor(0.4 * n)

# Calculate the training summary, but save five observations for monitoring.
trainResults_ls <- mspTrain(data = normal_switch_xts[1:(n - 5), -1],
                            labelVector = normal_switch_xts[1:(n - 5), 1],
                            trainObs = nTrainObs,
                            lagsIncluded = 1)

# While training, we included 1 lag (the default), so we will also lag the
# observations we will test.
testObs <- normal_switch_xts[(n - 6):n, -1]
testObs <- stats::lag(testObs, 0:1)
testObs <- testObs[-1, ]
testObs <- cbind(normal_switch_xts[(n - 5):n, 1], testObs)

# Run the monitoring function.
dataAndFlags <- mspMonitor(observations = testObs[, -1],
                           labelVector = testObs[, 1],
                           trainingSummary = trainResults_ls$TrainingSpecs)

# Alarm check the last row of the matrix returned by the mspMonitor function
mspWarning(dataAndFlags)
}

