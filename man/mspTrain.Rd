% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mspTrain.R
\name{mspTrain}
\alias{mspTrain}
\title{Multi-State Adaptive-Dynamic Process Training}
\usage{
mspTrain(data, labelVector, trainObs, updateFreq = ceiling(0.5 * trainObs),
  Dynamic = TRUE, lagsIncluded = 1, faultsToTriggerAlarm = 3, ...)
}
\arguments{
\item{data}{An xts data matrix}

\item{labelVector}{Class label vector (as logical or finite numeric)}

\item{trainObs}{The number of observations upon which to train the algorithm}

\item{updateFreq}{The algorithm update frequency (defaulting to half as many
observations as the training frequency)}

\item{Dynamic}{Should the PCA algorithm include lagged variables? Defaults
to TRUE}

\item{lagsIncluded}{If Dynamic = TRUE, how many lags should be included?
Defaults to 1.}

\item{faultsToTriggerAlarm}{The number of sequential faults needed to
trigger an alarm}

\item{...}{Lazy dots for additional internal arguments}
}
\value{
A list of the following components: FaultChecks - an xts data matrix
containing the SPE monitoring statistic and logical flagging indicator, the
Hotelling's T2 monitoring statitisic and logical flagging indicator, and the
Alarm indicator; Non_Alarmed_Obs - an xts data matrix of all the non-Alarmed
observations; Alarms - and an xts data matrix of the features and specific
alarms for Alarmed observations, where the alarm code is as follows: 0 = no
alarm, 1 = Hotelling's T2 alarm, 2 = SPE alarm, and 3 = both alarms.
}
\description{
This function performs Multi-State Adaptive-Dynamic PCA on a
data set with time-stamped observations.
}
\details{
This function is designed to identify and sort out sequences of
observations which fall outside normal operating conditions. We assume that
the process data are time-dependent in both seasonal and non-stationary
effects (which necessitate the Adaptive and Dynamic components, respectively).
We further assume that this process data is drawn from a process under
multiple mutually exclusive states, implying that the linear dimension
reduction projection matrices may be different for each state. Therefore, in
summary, this function splits the data by classes, lags the features to
account for correlation between sequential observations, and re-estimates
projection matrices on a rolling window to account for seasonality. Further,
this function uses non-parametric density estimation to calculate the 1 -
alpha quantiles of the SPE and Hotelling's T2 statistics from a set of
training observations, then flags any observation in the testing data set
with statistics beyond these calculated critical values. Becuase of natural
variablity inherent in all real data, we do not remove observations simply
because they are have been flagged. This function records an alarm only for
observations having three (as set by the default argument value of
"faultsToTriggerAlarm") flags in a row. These alarm-positive observations
are then removed from the data set.
}

